{"version":3,"sources":["components/layout/Header.js","components/layout/GameSection.js","components/Difficulty.js","components/Timer.js","components/Numbers.js","components/Action.js","components/Mode.js","components/layout/StatusSection.js","components/layout/Footer.js","sudoku.js","App.js","index.js"],"names":["Header","props","className","onClick","GameSection","rows","_isCellSameAsSelectedCell","row","column","fastMode","numberSelected","gameArray","cellSelected","_selectedCell","indexOfArray","value","initArray","key","_unselectedCell","map","Difficulty","name","defaultValue","difficulty","onChange","Timer","useState","moment","currentTime","setCurrentTime","useEffect","won","setTimeout","secondsTotal","diff","timeGameStarted","duration","hours","minutes","seconds","stringTimer","getTimer","Numbers","number","toString","onClickNumber","Svg","action","height","viewBox","width","xmlns","d","fill","version","id","x","y","Action","onClickAction","Mode","mode","type","onClickMode","StatusSection","onClickUndo","onClickErase","onClickHint","onClickMistakesMode","onClickFastMode","Footer","href","sudoku","COLS","DIGITS","SQUARES","UNITS","SQUARE_UNITS_MAP","SQUARE_PEERS_MAP","DIFFICULTY","BLANK_CHAR","BLANK_BOARD","generate","unique","easy","_force_range","NR_SQUARES","blank_board","i","candidates","_get_candidates_map","shuffled_squares","_shuffle","si","square","rand_candidate_idx","_rand_range","length","rand_candidate","_assign","single_candidates","push","_strip_dups","board","givens_idxs","nr_givens","target","parseInt","substr","solve","reverse","report","validate_board","_in","result","_search","solution","get_candidates","candidates_map","cur_row","candidate_map","squares_values_map","_get_square_vals_map","val","max_nr_candidates","nr_candidates","min_nr_candidates","min_candidates_square","min_candidates","vi","candidates_copy","JSON","parse","stringify","candidates_next","other_vals","replace","ovi","other_val","_eliminate","target_val","pi","peer","candidates_new","ui","unit","val_places","unit_square","squares_vals_map","_get_square_units_map","squares","units","square_unit_map","cur_square","cur_square_units","cur_unit","indexOf","_get_square_peers_map","units_map","square_peers_map","cur_square_peers","sui","cur_unit_square","_get_all_units","cols","ri","_cross","ci","row_squares","col_squares","rsi","csi","board_string_to_grid","board_string","board_grid_to_string","board_grid","r","c","print_board","display_string","console","log","a","b","ai","bi","v","seq","_first_true","shuffled","ti","max","min","Math","floor","random","seq_set","dup_map","e","nr","App","initialArray","nullArray","setGameArray","setDifficulty","setNumberSelected","setTimeGameStarted","mistakesMode","setMistakesMode","setFastMode","setCellSelected","history","setHistory","setInitArray","solvedArray","setSolvedArray","overlay","setOverlay","setWon","_getIndexOfCell","box","cell","_getBoxCenter","_cellAvailable","tempInitArray","_createNewGame","slice","tempSolvedArray","str","forEach","index","minimumCells","maximumCells","totalCells","currentDifficulty","boxCounts","boxesAvailable","cellsAvailable","j","_generateUniqueSudoku","_fillCell","tempArray","tempHistory","every","cellIndex","_isSolved","_userFillCell","onClickCell","onChangeDifficulty","pop","render","document","getElementById"],"mappings":"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","file":"static/js/main.fa7017e5.chunk.js","sourcesContent":["import React from 'react';\n\nexport const Header = (props) => {\n  return (\n    <header className=\"header\">\n      <h1>\n        Su<span className=\"header__group-one\">do</span><span className=\"header__group-two\">ku</span>\n      </h1>\n      <h2 onClick={props.onClick}>\n        New Game\n      </h2>\n    </header>\n  )\n}\n","import React from 'react';\n\nexport const GameSection = (props) => {\n  const rows = [0,1,2,3,4,5,6,7,8];\n\n  function _isCellRelatedToSelectedCell(row, column) {\n    if (props.cellSelected === row * 9 + column) {\n      return true;\n    }\n    let rowOfSelectedCell = Math.floor(props.cellSelected / 9);\n    let columnOfSelectedCell = props.cellSelected % 9;\n    if (rowOfSelectedCell === row || columnOfSelectedCell === column) {\n      return true;\n    }\n    return [  [0,3,0,3],\n              [0,3,3,6],\n              [0,3,6,9],\n              [3,6,0,3],\n              [3,6,3,6],\n              [3,6,6,9],\n              [6,9,0,3],\n              [6,9,3,6],\n              [6,9,6,9]\n            ].some((array) => {\n              if (rowOfSelectedCell > array[0]-1 && row > array[0]-1 &&\n                  rowOfSelectedCell < array[1] && row < array[1] &&\n                  columnOfSelectedCell > array[2]-1 && column > array[2]-1 &&\n                  columnOfSelectedCell < array[3] && column < array[3])\n                  return true;\n              return false;\n            });\n  }\n\n  function _isCellSameAsSelectedCell(row, column) {\n    if (props.fastMode) {\n      if (props.numberSelected === props.gameArray[row * 9 + column]) {\n        return true;\n      }\n      return false;\n    } else {\n      if (props.cellSelected === row * 9 + column) {\n        return true;\n      }\n      if (props.gameArray[props.cellSelected] === '0') {\n        return false;\n      }\n      if (props.gameArray[props.cellSelected] === props.gameArray[row * 9 + column]) {\n        return true;\n      }\n    }\n  }\n\n  function _selectedCell(indexOfArray, value) {\n    if (value !== '0') {\n      if (props.initArray[indexOfArray] === '0') {\n        return (\n          <td className=\"game__cell game__cell--userfilled game__cell--selected\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n        )\n      } else {\n        return (\n          <td className=\"game__cell game__cell--filled game__cell--selected\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n        )\n      }\n    } else {\n      return (\n        <td className=\"game__cell game__cell--selected\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n      )\n    }\n  }\n\n  function _unselectedCell(indexOfArray, value) {\n    if (value !== '0') {\n      if (props.initArray[indexOfArray] === '0') {\n        return (\n          <td className=\"game__cell game__cell--userfilled\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n        )\n      } else {\n        return (\n          <td className=\"game__cell game__cell--filled\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n        )\n      }\n    } else {\n      return (\n        <td className=\"game__cell\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n      )\n    }\n  }\n\n  return (\n    <section className=\"game\">\n      <table className=\"game__board\">\n        <tbody>\n          {\n            rows.map((row) => {\n              return (\n                <tr className=\"game__row\" key={row}>\n                  {\n                    rows.map((column) => {\n                      const indexOfArray = row * 9 + column;\n                      const value = props.gameArray[indexOfArray];\n\n                      if (props.cellSelected === indexOfArray) {\n                        if (value !== '0') {\n                          if (props.initArray[indexOfArray] === '0') {\n                            return (\n                              <td className=\"game__cell game__cell--userfilled game__cell--highlightselected\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n                            )\n                          } else {\n                            return (\n                              <td className=\"game__cell game__cell--filled game__cell--highlightselected\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n                            )\n                          }\n                        } else {\n                          return (\n                            <td className=\"game__cell game__cell--highlightselected\" key={indexOfArray} onClick={() => props.onClick(indexOfArray)}>{value}</td>\n                          )\n                        }\n                      }\n\n                      if (props.fastMode) {\n                        if (props.numberSelected !== '0' && _isCellSameAsSelectedCell(row, column)) {\n                          return _selectedCell(indexOfArray, value);\n                        } else {\n                          return _unselectedCell(indexOfArray, value);\n                        }\n                      } else {\n                        if (props.cellSelected !== -1 && _isCellSameAsSelectedCell(row, column)) {\n                          return _selectedCell(indexOfArray, value);\n                        } else {\n                          return _unselectedCell(indexOfArray, value);\n                        }\n                      }\n                    })\n                  }\n                </tr>\n              )\n            })\n          }\n        </tbody>\n      </table>\n    </section>\n  )\n}\n","import React from 'react';\n\nexport const Difficulty = (props) => {\n  return (\n    <div className=\"status__difficulty\">\n      <span className=\"status__difficulty-text\">Difficulty:&nbsp;&nbsp;</span>\n      <select name=\"status__difficulty-select\" className=\"status__difficulty-select\" defaultValue={props.difficulty} onChange={props.onChange}>\n        <option value=\"Easy\">Easy</option>\n        <option value=\"Medium\">Medium</option>\n        <option value=\"Hard\">Hard</option>\n      </select>\n    </div>\n  )\n}\n","import React, { useState, useEffect } from 'react';\nimport moment from 'moment';\n\nexport const Timer = (props) => {\n  let [currentTime, setCurrentTime] = useState(moment());\n\n  useEffect(() => {\n    if (!props.won)\n      setTimeout(() => tick(), 1000);\n  });\n\n  function tick() {\n    setCurrentTime(moment());\n  }\n\n  function getTimer() {\n    let secondsTotal = currentTime.diff(props.timeGameStarted, 'seconds');\n    if (secondsTotal <= 0)\n      return '00:00';\n    let duration = moment.duration(secondsTotal, 'seconds');\n    let hours = duration.hours();\n    let minutes = duration.minutes();\n    let seconds = duration.seconds();\n    let stringTimer = '';\n\n    stringTimer += hours ? '' + hours + ':' : '';\n    stringTimer += minutes ? (minutes < 10 ? '0' : '') + minutes + ':' : '00:';\n    stringTimer += seconds < 10 ? '0' + seconds : seconds;\n\n    return stringTimer;\n  }\n\n  return (\n    <div className=\"status__time\">{getTimer()}\n    </div>\n  )\n}\n","import React from 'react';\n\nexport const Numbers = (props) => {\n  return (\n    <div className=\"status__numbers\">\n      {\n        [1,2,3,4,5,6,7,8,9].map((number) => {\n          if (props.numberSelected === number.toString()) {\n            return (\n              <div className=\"status__number status__number--selected\" key={number} onClick={() => props.onClickNumber(number.toString())}>{number}</div>\n            )\n          } else {\n            return (\n              <div className=\"status__number\" key={number} onClick={() => props.onClickNumber(number.toString())}>{number}</div>\n            )\n          }\n        })\n      }\n    </div>\n  )\n}\n","import React from 'react';\n\nconst Svg = (props) => {\n  if (props.action === 'undo') {\n    return (\n      <svg className=\"status__action-svg\" height=\"512pt\" viewBox=\"0 0 512 512\" width=\"512pt\" xmlns=\"http://www.w3.org/2000/svg\"><path d=\"m154.667969 213.332031h-138.667969c-8.832031 0-16-7.167969-16-16v-138.664062c0-8.832031 7.167969-16 16-16s16 7.167969 16 16v122.664062h122.667969c8.832031 0 16 7.167969 16 16s-7.167969 16-16 16zm0 0\" fill=\"hsl(213, 30%, 59%)\"/><path d=\"m256 512c-68.351562 0-132.628906-26.644531-180.96875-75.03125-6.253906-6.25-6.253906-16.382812 0-22.632812 6.269531-6.273438 16.402344-6.230469 22.632812 0 42.304688 42.347656 98.515626 65.664062 158.335938 65.664062 123.519531 0 224-100.480469 224-224s-100.480469-224-224-224c-105.855469 0-200.257812 71.148438-224.449219 169.171875-2.132812 8.597656-10.75 13.824219-19.371093 11.714844-8.574219-2.132813-13.800782-10.796875-11.710938-19.371094 27.691406-112.148437 135.148438-193.515625 255.53125-193.515625 141.164062 0 256 114.835938 256 256s-114.835938 256-256 256zm0 0\" fill=\"hsl(213, 30%, 59%)\"/></svg>\n    )\n  } else if (props.action === 'erase') {\n    return (\n      <svg className=\"status__action-svg\" version=\"1.1\" id=\"Layer_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 512.001 512.001\"><path d=\"M505.922,476.567L285.355,256L505.92,35.435c8.106-8.105,8.106-21.248,0-29.354c-8.105-8.106-21.248-8.106-29.354,0L256.001,226.646L35.434,6.081c-8.105-8.106-21.248-8.106-29.354,0c-8.106,8.105-8.106,21.248,0,29.354L226.646,256L6.08,476.567c-8.106,8.106-8.106,21.248,0,29.354c8.105,8.105,21.248,8.106,29.354,0l220.567-220.567l220.567,220.567c8.105,8.105,21.248,8.106,29.354,0S514.028,484.673,505.922,476.567z\" fill=\"hsl(213, 30%, 59%)\"/></svg>\n    )\n  } else if (props.action === 'hint') {\n    return (\n      <svg className=\"status__action-svg\" version=\"1.1\" id=\"Capa_1\" xmlns=\"http://www.w3.org/2000/svg\" x=\"0px\" y=\"0px\" viewBox=\"0 0 432.4 432.4\">\n        <path d=\"M216.529,93.2c-61.2,0-111.2,50-111.2,111.2c0,32,14,62.8,37.6,83.6c17.6,17.6,16,55.2,15.6,55.6c0,2,0.4,3.6,2,5.2c1.2,1.2,3.2,2,4.8,2h102c2,0,3.6-0.8,4.8-2c1.2-1.2,2-3.2,2-5.2c0-0.4-2-38,15.6-55.6c0.4-0.4,0.8-0.8,1.2-1.2c23.2-21.2,36.8-51.2,36.8-82.4C327.729,143.2,277.729,93.2,216.529,93.2zM280.529,277.6c-0.4,0.4-1.2,1.2-1.2,1.6c-15.6,16.8-18.4,44.4-18.8,57.6h-88.4c-0.4-13.2-3.2-42-20-59.2c-21.2-18.4-33.6-45.2-33.6-73.6c0-54,43.6-97.6,97.6-97.6s97.6,43.6,97.6,97.6C313.729,232.4,301.729,259.2,280.529,277.6z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M216.129,121.6c-3.6,0-6.8,3.2-6.8,6.8c0,3.6,3.2,6.8,6.8,6.8c40.4,0,72.8,32.8,72.8,72.8c0,3.6,3.2,6.8,6.8,6.8c3.6,0,6.8-3.2,6.8-6.8C302.929,160.4,264.129,121.6,216.129,121.6z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M260.529,358.4h-88.8c-9.2,0-16.8,7.6-16.8,16.8s7.6,16.8,16.8,16.8h88.4c9.6-0.4,17.2-7.6,17.2-16.8C277.329,366,269.729,358.4,260.529,358.4zM260.529,378h-88.8c-1.6,0-3.2-1.2-3.2-3.2s1.2-3.2,3.2-3.2h88.4c1.6,0,3.2,1.2,3.2,3.2S262.129,378,260.529,378z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M247.329,398.8h-62.4c-9.2,0-16.8,7.6-16.8,16.8s7.6,16.8,16.8,16.8h62.4c9.2,0,16.8-7.6,16.8-16.8C264.129,406,256.529,398.8,247.329,398.8zM247.329,418.4h-62.4c-1.6,0-3.2-1.2-3.2-3.2s1.2-3.2,3.2-3.2h62.4c1.6,0,3.2,1.2,3.2,3.2S248.929,418.4,247.329,418.4z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M216.129,60c4,0,6.8-3.2,6.8-6.8V6.8c0-3.6-3.2-6.8-6.8-6.8c-3.6,0-6.8,3.2-6.8,6.8v46.4C209.329,56.8,212.529,60,216.129,60z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M329.329,34.4c-3.2-2.4-7.2-1.2-9.2,1.6l-25.6,38.4c-2.4,3.2-1.6,7.6,1.6,9.6c1.2,0.8,2.4,1.2,3.6,1.2c2.4,0,4.4-1.2,5.6-3.2l25.6-38.4C333.329,40.8,332.529,36.4,329.329,34.4z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M134.929,83.6c1.2,0,2.4-0.4,3.6-1.2c3.2-2,4-6.4,2-9.6l-24.8-38.8c-2-3.2-6.4-4-9.6-2s-4,6.4-2,9.6l24.8,38.8C130.529,82.8,132.529,83.6,134.929,83.6z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M86.529,126l-40.4-22c-3.2-1.6-7.6-0.4-9.2,2.8c-2,3.2-0.8,7.6,2.8,9.2l40.4,22c1.2,0.4,2,0.8,3.2,0.8c2.4,0,4.8-1.2,6-3.6C90.929,132,89.729,127.6,86.529,126z\" fill=\"hsl(213, 30%, 59%)\"/>\n        <path d=\"M395.729,106.8c-1.6-3.2-6-4.4-9.2-2.8l-40.8,22c-3.2,1.6-4.4,6-2.8,9.2c1.2,2.4,3.6,3.6,6,3.6c1.2,0,2.4-0.4,3.2-0.8l40.8-22C396.129,114.4,397.329,110,395.729,106.8z\" fill=\"hsl(213, 30%, 59%)\"/>\n      </svg>\n    )\n  }\n}\n\nexport const Action = (props) => {\n  return (\n    <div className={  props.action === 'undo'\n                      ? \"status__action-undo\"\n                      : props.action === 'erase'\n                      ? \"status__action-erase\"\n                      : props.action === 'hint'\n                      ? \"status__action-hint\"\n                      : \"\"\n                    } onClick={props.onClickAction} >\n      <Svg action={props.action} />\n      <p className=\"status__action-text\">\n        {\n          props.action === 'undo'\n            ? 'Undo'\n            : props.action === 'erase'\n            ? 'Erase'\n            : props.action === 'hint'\n            ? 'Hint'\n            : ''\n        }</p>\n    </div>\n  )\n}\n","import React from 'react';\n\nexport const Mode = (props) => {\n  return (\n    <div className={ props.mode === 'mistakes'\n                      ? \"status__action-mistakes-mode\"\n                      : \"status__action-fast-mode\"}>\n      <label className={ props.mode === 'mistakes'\n                          ? \"status__action-mistakes-mode-switch\"\n                          : \"status__action-fast-mode-switch\"}>\n        <input type=\"checkbox\" />\n        <span className={ props.mode === 'mistakes'\n                            ? \"status__action-mistakes-mode-slider\"\n                            : \"status__action-fast-mode-slider\"}\n              onClick={props.onClickMode}\n        ></span>\n      </label>\n      <p className=\"status__action-text\">{ props.mode === 'mistakes'\n                  ? 'Mistakes Mode'\n                  : 'Fast Mode'}</p>\n    </div>\n  )\n}\n","import React from 'react';\nimport { Difficulty } from '../Difficulty';\nimport { Timer } from '../Timer';\nimport { Numbers } from '../Numbers';\nimport { Action } from '../Action';\nimport { Mode } from '../Mode';\n\nexport const StatusSection = (props) => {\n  return (\n    <section className=\"status\">\n      <Difficulty difficulty={props.difficulty} onChange={props.onChange} />\n      <Timer timeGameStarted={props.timeGameStarted} won={props.won} />\n      <Numbers numberSelected={props.numberSelected} onClickNumber={(number) => props.onClickNumber(number)} />\n      <div className=\"status__actions\">\n        <Action action='undo' onClickAction={props.onClickUndo} />\n        <Action action='erase' onClickAction={props.onClickErase} />\n        <Action action='hint' onClickAction={props.onClickHint} />\n        <Mode mode='mistakes' onClickMode={props.onClickMistakesMode} />\n        <Mode mode='fast' onClickMode={props.onClickFastMode} />\n      </div>\n    </section>\n  )\n}\n","import React from 'react';\n\nexport const Footer = () => {\n  return (\n    <footer className=\"footer\">\n      <p>&#169; 2020 Amith Raravi - source code on <a href=\"https://github.com/raravi/sudoku\">Github</a></p>\n    </footer>\n  )\n}\n","/*\n    Sudoku.js\n    ---------\n\n    A Sudoku puzzle generator and solver JavaScript library.\n\n    Please see the README for more details.\n*/\n\n//(function(root){\n    //var sudoku = root.sudoku = {};  // Global reference to the sudoku library\n    var sudoku = {};\n    sudoku.DIGITS = \"123456789\";    // Allowed sudoku.DIGITS\n    var ROWS = \"ABCDEFGHI\";         // Row lables\n    var COLS = sudoku.DIGITS;       // Column lables\n    var SQUARES = null;             // Square IDs\n\n    var UNITS = null;               // All units (row, column, or box)\n    var SQUARE_UNITS_MAP = null;    // Squares -> units map\n    var SQUARE_PEERS_MAP = null;    // Squares -> peers map\n\n    var MIN_GIVENS = 17;            // Minimum number of givens\n    var NR_SQUARES = 81;            // Number of squares\n\n    // Define difficulties by how many squares are given to the player in a new\n    // puzzle.\n    var DIFFICULTY = {\n        \"easy\":         62,\n        \"medium\":       53,\n        \"hard\":         44,\n        \"very-hard\":    35,\n        \"insane\":       26,\n        \"inhuman\":      17,\n    };\n\n    // Blank character and board representation\n    sudoku.BLANK_CHAR = '.';\n    sudoku.BLANK_BOARD = \"....................................................\"+\n            \".............................\";\n\n    // Init\n    // -------------------------------------------------------------------------\n    function initialize(){\n        /* Initialize the Sudoku library (invoked after library load)\n        */\n        SQUARES             = sudoku._cross(ROWS, COLS);\n        UNITS               = sudoku._get_all_units(ROWS, COLS);\n        SQUARE_UNITS_MAP    = sudoku._get_square_units_map(SQUARES, UNITS);\n        SQUARE_PEERS_MAP    = sudoku._get_square_peers_map(SQUARES,\n                                    SQUARE_UNITS_MAP);\n    }\n\n    // Generate\n    // -------------------------------------------------------------------------\n    sudoku.generate = function(difficulty, unique){\n        /* Generate a new Sudoku puzzle of a particular `difficulty`, e.g.,\n\n            // Generate an \"easy\" sudoku puzzle\n            sudoku.generate(\"easy\");\n\n\n        Difficulties are as follows, and represent the number of given squares:\n\n                \"easy\":         61\n                \"medium\":       52\n                \"hard\":         43\n                \"very-hard\":    34\n                \"insane\":       25\n                \"inhuman\":      17\n\n\n        You may also enter a custom number of squares to be given, e.g.,\n\n            // Generate a new Sudoku puzzle with 60 given squares\n            sudoku.generate(60)\n\n\n        `difficulty` must be a number between 17 and 81 inclusive. If it's\n        outside of that range, `difficulty` will be set to the closest bound,\n        e.g., 0 -> 17, and 100 -> 81.\n\n\n        By default, the puzzles are unique, uless you set `unique` to false.\n        (Note: Puzzle uniqueness is not yet implemented, so puzzles are *not*\n        guaranteed to have unique solutions)\n\n        TODO: Implement puzzle uniqueness\n        */\n\n        // If `difficulty` is a string or undefined, convert it to a number or\n        // default it to \"easy\" if undefined.\n        if(typeof difficulty === \"string\" || typeof difficulty === \"undefined\"){\n            difficulty = DIFFICULTY[difficulty] || DIFFICULTY.easy;\n        }\n\n        // Force difficulty between 17 and 81 inclusive\n        difficulty = sudoku._force_range(difficulty, NR_SQUARES + 1,\n                MIN_GIVENS);\n\n        // Default unique to true\n        unique = unique || true;\n\n        // Get a set of squares and all possible candidates for each square\n        var blank_board = \"\";\n        for(var i = 0; i < NR_SQUARES; ++i){\n            blank_board += '.';\n        }\n        var candidates = sudoku._get_candidates_map(blank_board);\n\n        // For each item in a shuffled list of squares\n        var shuffled_squares = sudoku._shuffle(SQUARES);\n        for(var si in shuffled_squares){\n            var square = shuffled_squares[si];\n\n            // If an assignment of a random chioce causes a contradictoin, give\n            // up and try again\n            var rand_candidate_idx =\n                    sudoku._rand_range(candidates[square].length);\n            var rand_candidate = candidates[square][rand_candidate_idx];\n            if(!sudoku._assign(candidates, square, rand_candidate)){\n                break;\n            }\n\n            // Make a list of all single candidates\n            var single_candidates = [];\n            for(si in SQUARES){\n                square = SQUARES[si];\n\n                if(candidates[square].length === 1){\n                    single_candidates.push(candidates[square]);\n                }\n            }\n\n            // If we have at least difficulty, and the unique candidate count is\n            // at least 8, return the puzzle!\n            if(single_candidates.length >= difficulty &&\n                    sudoku._strip_dups(single_candidates).length >= 8){\n                var board = \"\";\n                var givens_idxs = [];\n                for(i in SQUARES){\n                    square = SQUARES[i];\n                    if(candidates[square].length === 1){\n                        board += candidates[square];\n                        givens_idxs.push(i);\n                    } else {\n                        board += sudoku.BLANK_CHAR;\n                    }\n                }\n\n                // If we have more than `difficulty` givens, remove some random\n                // givens until we're down to exactly `difficulty`\n                var nr_givens = givens_idxs.length;\n                if(nr_givens > difficulty){\n                    givens_idxs = sudoku._shuffle(givens_idxs);\n                    for(i = 0; i < nr_givens - difficulty; ++i){\n                        var target = parseInt(givens_idxs[i]);\n                        board = board.substr(0, target) + sudoku.BLANK_CHAR +\n                            board.substr(target + 1);\n                    }\n                }\n\n                // Double check board is solvable\n                // TODO: Make a standalone board checker. Solve is expensive.\n                if(sudoku.solve(board)){\n                    return board;\n                }\n            }\n        }\n\n        // Give up and try a new puzzle\n        return sudoku.generate(difficulty);\n    };\n\n    // Solve\n    // -------------------------------------------------------------------------\n    sudoku.solve = function(board, reverse){\n        /* Solve a sudoku puzzle given a sudoku `board`, i.e., an 81-character\n        string of sudoku.DIGITS, 1-9, and spaces identified by '.', representing the\n        squares. There must be a minimum of 17 givens. If the given board has no\n        solutions, return false.\n\n        Optionally set `reverse` to solve \"backwards\", i.e., rotate through the\n        possibilities in reverse. Useful for checking if there is more than one\n        solution.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Check number of givens is at least MIN_GIVENS\n        var nr_givens = 0;\n        for(var i in board){\n            if(board[i] !== sudoku.BLANK_CHAR && sudoku._in(board[i], sudoku.DIGITS)){\n                ++nr_givens;\n            }\n        }\n        if(nr_givens < MIN_GIVENS){\n            // eslint-disable-next-line\n            throw \"Too few givens. Minimum givens is \" + MIN_GIVENS;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        var candidates = sudoku._get_candidates_map(board);\n        var result = sudoku._search(candidates, reverse);\n\n        if(result){\n            var solution = \"\";\n            for(var square in result){\n                solution += result[square];\n            }\n            return solution;\n        }\n        return false;\n    };\n\n    sudoku.get_candidates = function(board){\n        /* Return all possible candidatees for each square as a grid of\n        candidates, returnning `false` if a contradiction is encountered.\n\n        Really just a wrapper for sudoku._get_candidates_map for programmer\n        consumption.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        // Get a candidates map\n        var candidates_map = sudoku._get_candidates_map(board);\n\n        // If there's an error, return false\n        if(!candidates_map){\n            return false;\n        }\n\n        // Transform candidates map into grid\n        var rows = [];\n        var cur_row = [];\n        var i = 0;\n        for(var square in candidates_map){\n            var candidates = candidates_map[square];\n            cur_row.push(candidates);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n            ++i;\n        }\n        return rows;\n    }\n\n    sudoku._get_candidates_map = function(board){\n        /* Get all possible candidates for each square as a map in the form\n        {square: sudoku.DIGITS} using recursive constraint propagation. Return `false`\n        if a contradiction is encountered\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var candidate_map = {};\n        var squares_values_map = sudoku._get_square_vals_map(board);\n\n        // Start by assigning every digit as a candidate to every square\n        for(var si in SQUARES){\n            candidate_map[SQUARES[si]] = sudoku.DIGITS;\n        }\n\n        // For each non-blank square, assign its value in the candidate map and\n        // propigate.\n        for(var square in squares_values_map){\n            var val = squares_values_map[square];\n\n            if(sudoku._in(val, sudoku.DIGITS)){\n                var new_candidates = sudoku._assign(candidate_map, square, val);\n\n                // Fail if we can't assign val to square\n                if(!new_candidates){\n                    return false;\n                }\n            }\n        }\n\n        return candidate_map;\n    };\n\n    sudoku._search = function(candidates, reverse){\n        /* Given a map of squares -> candiates, using depth-first search,\n        recursively try all possible values until a solution is found, or false\n        if no solution exists.\n        */\n\n        // Return if error in previous iteration\n        if(!candidates){\n            return false;\n        }\n\n        // Default reverse to false\n        reverse = reverse || false;\n\n        // If only one candidate for every square, we've a solved puzzle!\n        // Return the candidates map.\n        var max_nr_candidates = 0;\n        // eslint-disable-next-line\n        var max_candidates_square = null;\n        for(var si in SQUARES){\n            var square = SQUARES[si];\n\n            var nr_candidates = candidates[square].length;\n\n            if(nr_candidates > max_nr_candidates){\n                max_nr_candidates = nr_candidates;\n                max_candidates_square = square;\n            }\n        }\n        if(max_nr_candidates === 1){\n            return candidates;\n        }\n\n        // Choose the blank square with the fewest possibilities > 1\n        var min_nr_candidates = 10;\n        var min_candidates_square = null;\n        for(si in SQUARES){\n            square = SQUARES[si];\n\n            nr_candidates = candidates[square].length;\n\n            if(nr_candidates < min_nr_candidates && nr_candidates > 1){\n                min_nr_candidates = nr_candidates;\n                min_candidates_square = square;\n            }\n        }\n\n        // Recursively search through each of the candidates of the square\n        // starting with the one with fewest candidates.\n\n        // Rotate through the candidates forwards\n        var min_candidates = candidates[min_candidates_square];\n        if(!reverse){\n            for(var vi in min_candidates){\n                var val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                var candidates_copy = JSON.parse(JSON.stringify(candidates));\n                var candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val)\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n\n        // Rotate through the candidates backwards\n        } else {\n            for(vi = min_candidates.length - 1; vi >= 0; --vi){\n                val = min_candidates[vi];\n\n                // TODO: Implement a non-rediculous deep copy function\n                candidates_copy = JSON.parse(JSON.stringify(candidates));\n                candidates_next = sudoku._search(\n                    sudoku._assign(candidates_copy, min_candidates_square, val),\n                    reverse\n                );\n\n                if(candidates_next){\n                    return candidates_next;\n                }\n            }\n        }\n\n        // If we get through all combinations of the square with the fewest\n        // candidates without finding an answer, there isn't one. Return false.\n        return false;\n    };\n\n    sudoku._assign = function(candidates, square, val){\n        /* Eliminate all values, *except* for `val`, from `candidates` at\n        `square` (candidates[square]), and propagate. Return the candidates map\n        when finished. If a contradiciton is found, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // Grab a list of canidates without 'val'\n        var other_vals = candidates[square].replace(val, \"\");\n\n        // Loop through all other values and eliminate them from the candidates\n        // at the current square, and propigate. If at any point we get a\n        // contradiction, return false.\n        for(var ovi in other_vals){\n            var other_val = other_vals[ovi];\n\n            var candidates_next =\n                sudoku._eliminate(candidates, square, other_val);\n\n            if(!candidates_next){\n                //console.log(\"Contradiction found by _eliminate.\");\n                return false;\n            }\n        }\n\n        return candidates;\n    };\n\n    sudoku._eliminate = function(candidates, square, val){\n        /* Eliminate `val` from `candidates` at `square`, (candidates[square]),\n        and propagate when values or places <= 2. Return updated candidates,\n        unless a contradiction is detected, in which case, return false.\n\n        WARNING: This will modify the contents of `candidates` directly.\n        */\n\n        // If `val` has already been eliminated from candidates[square], return\n        // with candidates.\n        if(!sudoku._in(val, candidates[square])){\n            return candidates;\n        }\n\n        // Remove `val` from candidates[square]\n        candidates[square] = candidates[square].replace(val, '');\n\n        // If the square has only candidate left, eliminate that value from its\n        // peers\n        var nr_candidates = candidates[square].length;\n        if(nr_candidates === 1){\n            var target_val = candidates[square];\n\n            for(var pi in SQUARE_PEERS_MAP[square]){\n                var peer = SQUARE_PEERS_MAP[square][pi];\n\n                var candidates_new =\n                        sudoku._eliminate(candidates, peer, target_val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n\n        // Otherwise, if the square has no candidates, we have a contradiction.\n        // Return false.\n        } if(nr_candidates === 0){\n            return false;\n        }\n\n        // If a unit is reduced to only one place for a value, then assign it\n        for(var ui in SQUARE_UNITS_MAP[square]){\n            var unit = SQUARE_UNITS_MAP[square][ui];\n\n            var val_places = [];\n            for(var si in unit){\n                var unit_square = unit[si];\n                if(sudoku._in(val, candidates[unit_square])){\n                    val_places.push(unit_square);\n                }\n            }\n\n            // If there's no place for this value, we have a contradition!\n            // return false\n            if(val_places.length === 0){\n                return false;\n\n            // Otherwise the value can only be in one place. Assign it there.\n            } else if(val_places.length === 1){\n                candidates_new =\n                    sudoku._assign(candidates, val_places[0], val);\n\n                if(!candidates_new){\n                    return false;\n                }\n            }\n        }\n\n        return candidates;\n    };\n\n\n    // Square relationships\n    // -------------------------------------------------------------------------\n    // Squares, and their relationships with values, units, and peers.\n\n    sudoku._get_square_vals_map = function(board){\n        /* Return a map of squares -> values\n        */\n        var squares_vals_map = {};\n\n        // Make sure `board` is a string of length 81\n        if(board.length !== SQUARES.length){\n            // eslint-disable-next-line\n            throw \"Board/squares length mismatch.\";\n\n        } else {\n            for(var i in SQUARES){\n                squares_vals_map[SQUARES[i]] = board[i];\n            }\n        }\n\n        return squares_vals_map;\n    };\n\n    sudoku._get_square_units_map = function(squares, units){\n        /* Return a map of `squares` and their associated units (row, col, box)\n        */\n        var square_unit_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n\n            // Maintain a list of the current square's units\n            var cur_square_units = [];\n\n            // Look through the units, and see if the current square is in it,\n            // and if so, add it to the list of of the square's units.\n            for(var ui in units){\n                var cur_unit = units[ui];\n\n                if(cur_unit.indexOf(cur_square) !== -1){\n                    cur_square_units.push(cur_unit);\n                }\n            }\n\n            // Save the current square and its units to the map\n            square_unit_map[cur_square] = cur_square_units;\n        }\n\n        return square_unit_map;\n    };\n\n    sudoku._get_square_peers_map = function(squares, units_map){\n        /* Return a map of `squares` and their associated peers, i.e., a set of\n        other squares in the square's unit.\n        */\n        var square_peers_map = {};\n\n        // For every square...\n        for(var si in squares){\n            var cur_square = squares[si];\n            var cur_square_units = units_map[cur_square];\n\n            // Maintain list of the current square's peers\n            var cur_square_peers = [];\n\n            // Look through the current square's units map...\n            for(var sui in cur_square_units){\n                var cur_unit = cur_square_units[sui];\n\n                for(var ui in cur_unit){\n                    var cur_unit_square = cur_unit[ui];\n\n                    if(cur_square_peers.indexOf(cur_unit_square) === -1 &&\n                            cur_unit_square !== cur_square){\n                        cur_square_peers.push(cur_unit_square);\n                    }\n                }\n            }\n\n            // Save the current square an its associated peers to the map\n            square_peers_map[cur_square] = cur_square_peers;\n        }\n\n        return square_peers_map;\n    };\n\n    sudoku._get_all_units = function(rows, cols){\n        /* Return a list of all units (rows, cols, boxes)\n        */\n        var units = [];\n\n        // Rows\n        for(var ri in rows){\n            units.push(sudoku._cross(rows[ri], cols));\n        }\n\n        // Columns\n        for(var ci in cols){\n           units.push(sudoku._cross(rows, cols[ci]));\n        }\n\n        // Boxes\n        var row_squares = [\"ABC\", \"DEF\", \"GHI\"];\n        var col_squares = [\"123\", \"456\", \"789\"];\n        for(var rsi in row_squares){\n            for(var csi in col_squares){\n                units.push(sudoku._cross(row_squares[rsi], col_squares[csi]));\n            }\n        }\n\n        return units;\n    };\n\n\n    // Conversions\n    // -------------------------------------------------------------------------\n    sudoku.board_string_to_grid = function(board_string){\n        /* Convert a board string to a two-dimensional array\n        */\n        var rows = [];\n        var cur_row = [];\n        for(var i in board_string){\n            cur_row.push(board_string[i]);\n            if(i % 9 === 8){\n                rows.push(cur_row);\n                cur_row = [];\n            }\n        }\n        return rows;\n    };\n\n    sudoku.board_grid_to_string = function(board_grid){\n        /* Convert a board grid to a string\n        */\n        var board_string = \"\";\n        for(var r = 0; r < 9; ++r){\n            for(var c = 0; c < 9; ++c){\n                board_string += board_grid[r][c];\n            }\n        }\n        return board_string;\n    };\n\n\n    // Utility\n    // -------------------------------------------------------------------------\n\n    sudoku.print_board = function(board){\n        /* Print a sudoku `board` to the console.\n        */\n\n        // Assure a valid board\n        var report = sudoku.validate_board(board);\n        if(report !== true){\n            throw report;\n        }\n\n        var V_PADDING = \" \";  // Insert after each square\n        var H_PADDING = '\\n'; // Insert after each row\n\n        var V_BOX_PADDING = \"  \"; // Box vertical padding\n        var H_BOX_PADDING = '\\n'; // Box horizontal padding\n\n        var display_string = \"\";\n\n        for(var i in board){\n            var square = board[i];\n\n            // Add the square and some padding\n            display_string += square + V_PADDING;\n\n            // Vertical edge of a box, insert v. box padding\n            if(i % 3 === 2){\n                display_string += V_BOX_PADDING;\n            }\n\n            // End of a line, insert horiz. padding\n            if(i % 9 === 8){\n                display_string += H_PADDING;\n            }\n\n            // Horizontal edge of a box, insert h. box padding\n            if(i % 27 === 26){\n                display_string += H_BOX_PADDING;\n            }\n        }\n\n        console.log(display_string);\n    };\n\n    sudoku.validate_board = function(board){\n        /* Return if the given `board` is valid or not. If it's valid, return\n        true. If it's not, return a string of the reason why it's not.\n        */\n\n        // Check for empty board\n        if(!board){\n            return \"Empty board\";\n        }\n\n        // Invalid board length\n        if(board.length !== NR_SQUARES){\n            return \"Invalid board size. Board must be exactly \" + NR_SQUARES +\n                    \" squares.\";\n        }\n\n        // Check for invalid characters\n        for(var i in board){\n            if(!sudoku._in(board[i], sudoku.DIGITS) && board[i] !== sudoku.BLANK_CHAR){\n                return \"Invalid board character encountered at index \" + i +\n                        \": \" + board[i];\n            }\n        }\n\n        // Otherwise, we're good. Return true.\n        return true;\n    };\n\n    sudoku._cross = function(a, b){\n        /* Cross product of all elements in `a` and `b`, e.g.,\n        sudoku._cross(\"abc\", \"123\") ->\n        [\"a1\", \"a2\", \"a3\", \"b1\", \"b2\", \"b3\", \"c1\", \"c2\", \"c3\"]\n        */\n        var result = [];\n        for(var ai in a){\n            for(var bi in b){\n                result.push(a[ai] + b[bi]);\n            }\n        }\n        return result;\n    };\n\n    sudoku._in = function(v, seq){\n        /* Return if a value `v` is in sequence `seq`.\n        */\n        return seq.indexOf(v) !== -1;\n    };\n\n    sudoku._first_true = function(seq){\n        /* Return the first element in `seq` that is true. If no element is\n        true, return false.\n        */\n        for(var i in seq){\n            if(seq[i]){\n                return seq[i];\n            }\n        }\n        return false;\n    };\n\n    sudoku._shuffle = function(seq){\n        /* Return a shuffled version of `seq`\n        */\n\n        // Create an array of the same size as `seq` filled with false\n        var shuffled = [];\n        for(var i = 0; i < seq.length; ++i){\n            shuffled.push(false);\n        }\n\n        for(i in seq){\n            var ti = sudoku._rand_range(seq.length);\n\n            while(shuffled[ti]){\n                ti = (ti + 1) > (seq.length - 1) ? 0 : (ti + 1);\n            }\n\n            shuffled[ti] = seq[i];\n        }\n\n        return shuffled;\n    };\n\n    sudoku._rand_range = function(max, min){\n        /* Get a random integer in the range of `min` to `max` (non inclusive).\n        If `min` not defined, default to 0. If `max` not defined, throw an\n        error.\n        */\n        min = min || 0;\n        if(max){\n            return Math.floor(Math.random() * (max - min)) + min;\n        } else {\n            // eslint-disable-next-line\n            throw \"Range undefined\";\n        }\n    };\n\n    sudoku._strip_dups = function(seq){\n        /* Strip duplicate values from `seq`\n        */\n        var seq_set = [];\n        var dup_map = {};\n        for(var i in seq){\n            var e = seq[i];\n            if(!dup_map[e]){\n                seq_set.push(e);\n                dup_map[e] = true;\n            }\n        }\n        return seq_set;\n    };\n\n    sudoku._force_range = function(nr, max, min){\n        /* Force `nr` to be within the range from `min` to, but not including,\n        `max`. `min` is optional, and will default to 0. If `nr` is undefined,\n        treat it as zero.\n        */\n        min = min || 0\n        nr = nr || 0\n        if(nr < min){\n            return min;\n        }\n        if(nr > max){\n            return max;\n        }\n        return nr\n    }\n\n    // Initialize library after load\n    initialize();\n\n    export const getSudoku = () => {\n      return sudoku;\n    }\n\n// Pass whatever the root object is, like 'window' in browsers\n//})(this);\n","import React, { useState } from 'react';\nimport moment from 'moment';\nimport { Header } from './components/layout/Header';\nimport { GameSection } from './components/layout/GameSection';\nimport { StatusSection } from './components/layout/StatusSection';\nimport { Footer } from './components/layout/Footer';\nimport './App.css';\nimport { getSudoku } from './sudoku';\n\nfunction App() {\n  let initialArray = [ '8', '0', '0', '0', '2', '0', '9', '1', '0',\n                    '2', '3', '4', '5', '1', '0', '0', '0', '7',\n                    '7', '1', '0', '0', '8', '0', '0', '5', '4',\n                    '6', '0', '0', '1', '0', '0', '3', '0', '5',\n                    '1', '8', '5', '0', '0', '0', '7', '2', '0',\n                    '0', '4', '0', '6', '0', '2', '8', '0', '0',\n                    '0', '6', '8', '0', '0', '0', '4', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '1', '6', '2',\n                    '0', '0', '0', '4', '0', '7', '5', '3', '0' ];\n  let nullArray = [ '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0',\n                    '0', '0', '0', '0', '0', '0', '0', '0', '0' ];\n  let initialSolvedArray=[ '8', '5', '6', '7', '2', '4', '9', '1', '3',\n                    '2', '3', '4', '5', '1', '9', '6', '8', '7',\n                    '7', '1', '9', '3', '8', '6', '2', '5', '4',\n                    '6', '9', '2', '1', '7', '8', '3', '4', '5',\n                    '1', '8', '5', '9', '4', '3', '7', '2', '6',\n                    '3', '4', '7', '6', '5', '2', '8', '9', '1',\n                    '5', '6', '8', '2', '3', '1', '4', '7', '9',\n                    '4', '7', '3', '8', '9', '5', '1', '6', '2',\n                    '9', '2', '1', '4', '6', '7', '5', '3', '8' ];\n  let sudoku = getSudoku();\n  let [ gameArray, setGameArray ] = useState(initialArray);\n  let [ difficulty,setDifficulty ] = useState('Easy');\n  let [ numberSelected, setNumberSelected ] = useState('0');\n  let [ timeGameStarted, setTimeGameStarted ] = useState(moment());\n  let [ mistakesMode, setMistakesMode ] = useState(false);\n  let [ fastMode, setFastMode ] = useState(false);\n  let [ cellSelected, setCellSelected ] = useState(-1);\n  let [ history, setHistory ] = useState([]);\n  let [ initArray, setInitArray ] = useState(initialArray);\n  let [ solvedArray, setSolvedArray ] = useState(initialSolvedArray);\n  let [ overlay, setOverlay] = useState(false);\n  let [won, setWon ] = useState(false);\n\n  function _getBoxCenter(box) {\n    switch(box) {\n      case 0: return [1,1];\n      case 1: return [1,4];\n      case 2: return [1,7];\n      case 3: return [4,1];\n      case 4: return [4,4];\n      case 5: return [4,7];\n      case 6: return [7,1];\n      case 7: return [7,4];\n      case 8: return [7,7];\n    }\n  }\n\n  function _getIndexOfCell(box, cell) {\n    let [row, column] = _getBoxCenter(box);\n    switch(cell) {\n      case 0: {row--; column--; break;}\n      case 1: {row--; break;}\n      case 2: {row--; column++; break;}\n      case 3: {column--; break;}\n      case 4: {break;}\n      case 5: {column++; break;}\n      case 6: {row++; column--; break;}\n      case 7: {row++; break;}\n      case 8: {row++; column++; break;}\n    }\n    return row * 9 + column;\n  }\n\n  function _cellAvailable(tempInitArray, box, value) {\n    return tempInitArray[_getIndexOfCell(box, value)] === '0' ? 0 : 1;\n  }\n\n  function _generateUniqueSudoku(solvedArray, e) {\n    let currentDifficulty = difficulty;\n    let boxes = 9;\n    let cells = 9;\n    let minimumCells, maximumCells, totalCells, box, cell;\n\n    let tempInitArray = nullArray.slice();\n    let boxCounts = [ 0,0,0,\n                      0,0,0,\n                      0,0,0 ];\n    let boxesAvailable = [];\n    let cellsAvailable = [];\n\n    if (e)\n      currentDifficulty = e.target.value;\n\n    if (currentDifficulty === 'Easy') {\n      minimumCells = 3;\n      maximumCells = 7;\n      totalCells = 45;\n    }\n    else if (currentDifficulty === 'Medium') {\n      minimumCells = 2;\n      maximumCells = 6;\n      totalCells = 40;\n    }\n    else {\n      minimumCells = 1;\n      maximumCells = 5;\n      totalCells = 30;\n    }\n\n    for (let j = 0; j < 9; j++) {\n      boxCounts[j] =  _cellAvailable(tempInitArray, j, 0) +\n                      _cellAvailable(tempInitArray, j, 1) +\n                      _cellAvailable(tempInitArray, j, 2) +\n                      _cellAvailable(tempInitArray, j, 3) +\n                      _cellAvailable(tempInitArray, j, 4) +\n                      _cellAvailable(tempInitArray, j, 5) +\n                      _cellAvailable(tempInitArray, j, 6) +\n                      _cellAvailable(tempInitArray, j, 7) +\n                      _cellAvailable(tempInitArray, j, 8);\n    }\n\n    for (let i = 0; i < totalCells; i++) {\n      boxesAvailable = [];\n      for (let j = 0; j < 9; j++) {\n        if (boxCounts[j] < minimumCells) {\n          boxesAvailable.push(j);\n        }\n      }\n      if (boxesAvailable) {\n        for (let j = 0; j < 9; j++) {\n          if (boxCounts[j] < maximumCells) {\n            boxesAvailable.push(j);\n          }\n        }\n      }\n      box = boxesAvailable[Math.random() * boxesAvailable.length | 0];\n\n      cellsAvailable = [];\n      for (let j = 0; j < 9; j++) {\n        if ( tempInitArray[_getIndexOfCell(box, j)] === '0') {\n          cellsAvailable.push(j);\n        }\n      }\n      cell = cellsAvailable[Math.random() * cellsAvailable.length | 0];\n\n      let index = _getIndexOfCell(box, cell);\n      tempInitArray[index] = solvedArray[index]\n      boxCounts[box]++;\n    }\n\n    return tempInitArray;\n  }\n\n  function _createNewGame(e) {\n    let tempInitArray = nullArray.slice();\n    let tempSolvedArray = nullArray.slice();\n\n    let str = sudoku.generate(60);\n\n    [...str].forEach((value, index) => {\n      tempInitArray[index] = value === '.'\n                          ? '0'\n                          : value;\n    });\n    str = sudoku.solve(str);\n    [...str].forEach((value, index) => {\n      tempSolvedArray[index] = value;\n    });\n    tempInitArray = _generateUniqueSudoku(tempSolvedArray, e);\n\n    setInitArray(tempInitArray);\n    setGameArray(tempInitArray);\n    setSolvedArray(tempSolvedArray);\n    setNumberSelected('0');\n    setTimeGameStarted(moment());\n    setCellSelected(-1);\n    setHistory([]);\n    setWon(false);\n  }\n\n  function _isSolved(index, value) {\n    if (gameArray.every((cell, cellIndex) => {\n          if (cellIndex === index)\n            return value === solvedArray[cellIndex];\n          else\n            return cell === solvedArray[cellIndex];\n        })) {\n      return true;\n    }\n    return false;\n  }\n\n  function _fillCell(index, value) {\n    if (initArray[index] === '0') {\n      // Direct copy results in interesting set of problems, investigate more!\n      let tempArray = gameArray.slice();\n      let tempHistory = history.slice();\n\n      // Can't use tempArray here, due to Side effect below!!\n      tempHistory.push(gameArray.slice());\n      setHistory(tempHistory);\n\n      tempArray[index] = value;\n      setGameArray(tempArray);\n\n      if (_isSolved(index, value)) {\n        setOverlay(true);\n        setWon(true);\n      }\n    }\n  }\n\n  function _userFillCell(index, value) {\n    if (mistakesMode) {\n      if (value === solvedArray[index]) {\n        _fillCell(index, value);\n      }\n      else {\n        // TODO: Flash - Mistakes not allowed in Mistakes Mode\n      }\n    } else {\n      _fillCell(index, value);\n    }\n  }\n\n  function onClickNewGame() {\n    _createNewGame();\n  }\n\n  function onClickCell(indexOfArray) {\n    if (fastMode && numberSelected !== '0') {\n      _userFillCell(indexOfArray, numberSelected);\n    }\n    setCellSelected(indexOfArray);\n  }\n\n  function onChangeDifficulty(e) {\n    setDifficulty(e.target.value);\n    _createNewGame(e);\n  }\n\n  function onClickNumber(number) {\n    if (fastMode) {\n      setNumberSelected(number)\n    } else if (cellSelected !== -1) {\n      _userFillCell(cellSelected,number);\n    }\n  }\n\n  function onClickUndo() {\n    if(history.length) {\n      let tempHistory = history.slice();\n      let tempArray = tempHistory.pop();\n      setHistory(tempHistory);\n      setGameArray(tempArray);\n    }\n  }\n\n  function onClickErase() {\n    if(cellSelected !== -1 && gameArray[cellSelected] !== '0') {\n      _fillCell(cellSelected, '0');\n    }\n  }\n\n  function onClickHint() {\n    if (cellSelected !== -1) {\n      _fillCell(cellSelected, solvedArray[cellSelected]);\n    }\n  }\n\n  function  onClickMistakesMode() {\n    setMistakesMode(!mistakesMode);\n  }\n\n  function onClickFastMode() {\n    if (fastMode) {\n      setNumberSelected('0');\n    }\n    setCellSelected(-1);\n    setFastMode(!fastMode);\n  }\n\n  function onClickOverlay() {\n    setOverlay(false);\n    _createNewGame();\n  }\n\n  return (\n    <>\n      <div className={overlay?\"container blur\":\"container\"}>\n        <Header onClick={onClickNewGame}/>\n        <div className=\"innercontainer\">\n          <GameSection gameArray={gameArray} initArray={initArray} fastMode={fastMode} numberSelected={numberSelected} cellSelected={cellSelected} onClick={(indexOfArray) => onClickCell(indexOfArray)}/>\n          <StatusSection difficulty={difficulty} numberSelected={numberSelected} timeGameStarted={timeGameStarted} won={won} onClickNumber={(number) => onClickNumber(number)} onChange={(e) => onChangeDifficulty(e)} onClickUndo={onClickUndo} onClickErase={onClickErase} onClickHint={onClickHint} onClickMistakesMode={onClickMistakesMode} onClickFastMode={onClickFastMode} />\n        </div>\n        <Footer />\n      </div>\n      <div className= { overlay\n                        ? \"overlay overlay--visible\"\n                        : \"overlay\"\n                      }\n           onClick={onClickOverlay}\n      >\n        <h2 className=\"overlay__text\">\n          You <span className=\"overlay__textspan1\">solved</span> <span className=\"overlay__textspan2\">it!</span>\n        </h2>\n      </div>\n    </>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport { render } from 'react-dom';\nimport App from './App';\n\nrender(<App />, document.getElementById('root'));\n"],"sourceRoot":""}